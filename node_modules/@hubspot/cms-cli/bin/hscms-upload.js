#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { Command } = require('commander');
const { version } = require('../package.json');

const {
  getFileMapperApiQueryFromMode,
} = require('@hubspot/cms-lib/fileMapper');
const { upload } = require('@hubspot/cms-lib/api/fileMapper');
const { ALLOWED_EXTENSIONS, loadConfig, sync } = require('@hubspot/cms-lib');
const { getCwd, convertToUnixPath } = require('@hubspot/cms-lib/path');
const { logger } = require('@hubspot/cms-lib/logger');
const { logErrorInstance } = require('@hubspot/cms-lib/errorHandlers');

const {
  ApiErrorContext,
  logApiUploadErrorInstance,
} = require('@hubspot/cms-lib/errorHandlers');

const {
  addConfigOptions,
  addPortalOptions,
  addLoggerOptions,
  addModeOptions,
  setLogLevel,
  getPortalId,
  getMode,
} = require('../lib/commonOpts');
const { logDebugInfo } = require('../lib/debugInfo');
const { validatePortal, validateMode } = require('../lib/validation');
const {
  trackCommandUsage,
  addHelpUsageTracking,
} = require('../lib/usageTracking');

const COMMAND_NAME = 'upload';
const program = new Command(`hscms ${COMMAND_NAME}`);

program
  .version(version)
  .description('Upload a folder or file from your computer to the HubSpot CMS')
  .arguments('<src> <dest>')
  .action(async (src, dest, command = {}) => {
    setLogLevel(command);
    logDebugInfo(command);
    const { config: configPath } = command;
    loadConfig(configPath);

    if (!((await validatePortal(command)) && validateMode(program))) {
      process.exit(1);
    }

    const portalId = getPortalId(command);
    const mode = getMode(command);
    const absoluteSrcPath = path.resolve(getCwd(), src);

    let stats;
    try {
      stats = fs.statSync(absoluteSrcPath);
      if (!stats.isFile() && !stats.isDirectory()) {
        logger.error(`The path "${src}" is not a path to a file or folder`);
        return;
      }
    } catch (e) {
      logger.error(`The path "${src}" is not a path to a file or folder`);
      return;
    }

    if (!dest) {
      logger.error('A destination path needs to be passed');
      return;
    }
    const normalizedDest = convertToUnixPath(dest);
    trackCommandUsage(
      COMMAND_NAME,
      { mode, type: stats.isFile() ? 'file' : 'folder' },
      portalId
    );

    if (stats.isFile()) {
      const ext = path.extname(src).replace(/^\./, '');
      if (!ALLOWED_EXTENSIONS.has(ext)) {
        logger.error(`The file "${src}" does not have a valid extension`);
        return;
      }

      upload(portalId, absoluteSrcPath, normalizedDest, {
        qs: getFileMapperApiQueryFromMode(mode),
      })
        .then(() => {
          logger.log('Uploaded file "%s" to "%s"', src, normalizedDest);
        })
        .catch(error => {
          logger.error(
            'Uploading file "%s" to "%s" failed',
            src,
            normalizedDest
          );
          logApiUploadErrorInstance(
            error,
            new ApiErrorContext({
              portalId,
              request: normalizedDest,
              payload: src,
            })
          );
        });
    } else {
      logger.log(
        `Uploading files from ${src} to ${dest} in portal ${portalId}`
      );
      sync(portalId, absoluteSrcPath, dest, mode)
        .then(() => {
          logger.log(`Upoading files to ${dest} is complete`);
        })
        .catch(error => {
          logger.error('Uploading failed');
          logErrorInstance(error, {
            portalId,
          });
        });
    }
  });

addConfigOptions(program);
addPortalOptions(program);
addLoggerOptions(program);
addModeOptions(program, { write: true });
addHelpUsageTracking(program, COMMAND_NAME);

program.parse(process.argv);
