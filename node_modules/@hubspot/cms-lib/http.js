const request = require('request-promise-native');
const { getPortalConfig, getConfig } = require('./lib/config');
const { getOauthManager } = require('./oauth');

const withOauth = async (portalId, portalConfig, requestOptions) => {
  const { headers } = requestOptions;
  const oauth = getOauthManager(portalId, portalConfig);
  const accessToken = await oauth.accessToken();
  return {
    ...requestOptions,
    headers: {
      ...headers,
      Authorization: `Bearer ${accessToken}`,
    },
  };
};

const getRequestOptions = (options = {}, requestOptions = {}) => {
  const { env } = options;
  const { httpTimeout, httpUseLocalhost } = getConfig();
  return {
    baseUrl: `https://${httpUseLocalhost ? 'local' : 'api'}.hubapi${
      env === 'QA' ? 'qa' : ''
    }.com`,
    headers: {
      'User-Agent': 'HubSpot CMS Tools',
    },
    json: true,
    simple: true,
    timeout: httpTimeout || 15000,
    ...requestOptions,
  };
};

const withPortalId = (portalId, requestOptions) => {
  const { qs } = requestOptions;

  return {
    ...requestOptions,
    qs: {
      ...qs,
      portalId,
    },
  };
};

const withAuth = async (portalId, options) => {
  const portalConfig = getPortalConfig(portalId);
  const { env, authType, apiKey } = portalConfig;
  const requestOptions = withPortalId(
    portalId,
    getRequestOptions({ env }, options)
  );

  if (authType === 'oauth2') {
    return withOauth(portalId, portalConfig, requestOptions);
  }
  const { qs } = requestOptions;

  return {
    ...requestOptions,
    qs: {
      ...qs,
      hapikey: apiKey,
    },
  };
};

const addQueryParams = (requestOptions, params = {}) => {
  const { qs } = requestOptions;
  return {
    ...requestOptions,
    qs: {
      ...qs,
      ...params,
    },
  };
};

const getRequest = async (portalId, options) => {
  const { query, ...rest } = options;
  const requestOptions = addQueryParams(rest, query);
  return request.get(await withAuth(portalId, requestOptions));
};

const postRequest = async (portalId, options) => {
  return request.post(await withAuth(portalId, options));
};

const putRequest = async (portalId, options) => {
  return request.put(await withAuth(portalId, options));
};

const deleteRequest = async (portalId, options) => {
  return request.del(await withAuth(portalId, options));
};

module.exports = {
  getRequestOptions,
  request,
  get: getRequest,
  post: postRequest,
  put: putRequest,
  delete: deleteRequest,
};
