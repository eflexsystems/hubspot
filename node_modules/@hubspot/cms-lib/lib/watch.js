const path = require('path');
const chokidar = require('chokidar');

const { ALLOWED_EXTENSIONS } = require('./constants');
const { logger } = require('../logger');
const {
  ApiErrorContext,
  logApiErrorInstance,
  logApiUploadErrorInstance,
} = require('../errorHandlers');
const { sync } = require('./sync');
const { getFileMapperApiQueryFromMode } = require('../fileMapper');
const { upload, deleteFile } = require('../api/fileMapper');
const escapeRegExp = require('./escapeRegExp');
const { convertToUnixPath } = require('../path');

function uploadFile(portalId, file, dest, mode) {
  const ext = path.extname(file).replace(/^\./, '');
  if (!ALLOWED_EXTENSIONS.has(ext)) {
    logger.debug(`Skipping ${file} due to unsupported extension`);
    return;
  }
  logger.debug('Attempting to upload file "%s" to "%s"', file, dest);
  const apiOptions = {
    qs: getFileMapperApiQueryFromMode(mode),
  };
  upload(portalId, file, dest, apiOptions)
    .then(() => {
      logger.log('Uploaded file "%s" to "%s"', file, dest);
    })
    .catch(() => {
      logger.debug('Uploading file "%s" to "%s" failed', file, dest);
      logger.debug('Retrying to upload file "%s" to "%s"', file, dest);
      upload(portalId, file, dest, apiOptions).catch(error => {
        logger.error('Uploading file "%s" to "%s" failed', file, dest);
        logApiUploadErrorInstance(
          error,
          new ApiErrorContext({
            portalId,
            request: dest,
            payload: file,
          })
        );
      });
    });
}

function watch(portalId, src, dest, mode) {
  const regex = new RegExp(`^${escapeRegExp(src)}`);
  const watcher = chokidar.watch(src, {
    ignoreInitial: true,
  });

  const getDesignManagerPath = file => {
    const relativePath = file.replace(regex, '');
    return convertToUnixPath(path.join(dest, relativePath));
  };

  // Use sync so that failures of initial sync are queued to the
  // end of the sync and retried
  sync(portalId, src, dest, mode).then(() => {
    logger.log('Initial sync complete');
  });

  watcher.on('ready', () => {
    logger.debug(`File watcher is ready and watching ${src}`);
  });

  watcher.on('add', file => {
    const destPath = getDesignManagerPath(file);
    uploadFile(portalId, file, destPath, mode);
  });

  watcher.on('unlink', filePath => {
    const remotePath = getDesignManagerPath(filePath);
    logger.debug('Attempting to delete file "%s"', remotePath);
    deleteFile(portalId, remotePath)
      .then(() => {
        logger.log('Deleted file "%s"', remotePath);
      })
      .catch(error => {
        logger.error('Deleting file "%s" failed', remotePath);
        logApiErrorInstance(
          error,
          new ApiErrorContext({
            portalId,
            request: remotePath,
          })
        );
      });
  });

  watcher.on('change', file => {
    const destPath = getDesignManagerPath(file);
    uploadFile(portalId, file, destPath, mode);
  });

  return watcher;
}

module.exports = {
  watch,
};
