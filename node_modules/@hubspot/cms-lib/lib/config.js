const yaml = require('js-yaml');
const fs = require('fs');
const findup = require('findup-sync');
const { logger } = require('../logger');
const { Mode } = require('./constants');

let config;
let configPath;

const writeConfig = () => {
  logger.debug(`Writing current config to ${configPath}`);
  fs.writeFileSync(
    configPath,
    yaml.safeDump(JSON.parse(JSON.stringify(config, null, 2)))
  );
};

const loadConfig = path => {
  configPath = path || findup('hubspot.config.yml');

  if (!configPath) {
    throw new Error('A hubspot.config.yml file could not be found');
  }

  logger.debug(`Reading config from ${configPath}`);
  config = yaml.safeLoad(fs.readFileSync(configPath));
  if (!config) {
    logger.debug('The config file was empty config');
    logger.debug('Initializing an empty config');
    config = {
      portals: [],
    };
  }
};

const getConfig = () => {
  if (!config) {
    loadConfig();
  }
  return config;
};

const setConfig = updatedConfig => {
  config = updatedConfig;
  return config;
};

const getPortalConfig = portalId =>
  config.portals.find(portal => portal.portalId === portalId);

const getPortalId = name => {
  const portal = config.portals.find(p => p.name === name);

  if (portal) {
    return portal.portalId;
  }
  return null;
};

const updatePortalConfig = configOptions => {
  const {
    portalId,
    authType,
    environment,
    clientId,
    clientSecret,
    scopes,
    tokenInfo,
    defaultMode,
  } = configOptions;

  if (!portalId) {
    throw new Error('A portalId is required to update the config');
  }

  const portalConfig = getPortalConfig(portalId);

  let auth;
  if (clientId || clientSecret || scopes || tokenInfo) {
    auth = {
      ...(portalConfig ? portalConfig.auth : {}),
      clientId,
      clientSecret,
      scopes,
      tokenInfo,
    };
  }
  const env =
    environment && environment.toUpperCase() === 'QA' ? 'QA' : undefined;
  const mode = defaultMode && defaultMode.toLowerCase();
  const nextPortalConfig = {
    ...portalConfig,
    env,
    portalId,
    authType,
    auth,
    defaultMode: Mode[mode] ? mode : undefined,
  };

  if (portalConfig) {
    logger.debug(`Updating config for ${portalId}`);
    const index = config.portals.indexOf(portalConfig);
    config.portals[index] = nextPortalConfig;
  } else {
    logger.debug(`Adding config entry for ${portalId}`);
    if (config.portals) {
      config.portals.push(nextPortalConfig);
    } else {
      config.portals = [nextPortalConfig];
    }
  }
  writeConfig();
};

module.exports = {
  getConfig,
  setConfig,
  loadConfig,
  getPortalConfig,
  getPortalId,
  updatePortalConfig,
};
