const path = require('path');
const { ALLOWED_EXTENSIONS } = require('./constants');
const { logger } = require('../logger');
const { getFileMapperApiQueryFromMode } = require('../fileMapper');
const { upload } = require('../api/fileMapper');
const { walk } = require('./walk');
const escapeRegExp = require('./escapeRegExp');
const { convertToUnixPath } = require('../path');
const {
  ApiErrorContext,
  logApiUploadErrorInstance,
  isFatalError,
} = require('../errorHandlers');

/**
 *
 * @param {number} portalId
 * @param {string} src
 * @param {string} dest
 * @param {string} mode
 */
function sync(portalId, src, dest, mode) {
  const regex = new RegExp(`^${escapeRegExp(src)}`);
  const apiOptions = {
    qs: getFileMapperApiQueryFromMode(mode),
  };
  return walk(src).then(files => {
    const failures = [];
    return Promise.all(
      files
        .filter(file => {
          const ext = path.extname(file).replace(/^\./, '');
          if (!ALLOWED_EXTENSIONS.has(ext)) {
            return false;
          }
          return true;
        })
        .map(file => {
          const relativePath = file.replace(regex, '');
          const destPath = convertToUnixPath(path.join(dest, relativePath));
          return new Promise((resolve, reject) => {
            logger.debug(
              'Attempting to upload file "%s" to "%s"',
              file,
              destPath
            );
            upload(portalId, file, destPath, apiOptions)
              .then(() => {
                logger.log('Uploaded file "%s" to "%s"', file, destPath);
                resolve();
              })
              .catch(error => {
                if (isFatalError(error)) {
                  reject(error);
                  return;
                }
                logger.debug(
                  'Uploading file "%s" to "%s" failed so scheduled retry',
                  file,
                  destPath
                );
                if (error.response && error.response.body) {
                  logger.debug(error.response.body);
                } else {
                  logger.debug(error.message);
                }
                failures.push({
                  file,
                  destPath,
                });
                resolve();
              });
          });
        })
    ).then(() => {
      return Promise.all(
        failures.map(({ file, destPath }) => {
          return new Promise((resolve, reject) => {
            logger.debug(
              'Retrying to upload file "%s" to "%s"',
              file,
              destPath
            );
            upload(portalId, file, destPath, apiOptions)
              .then(() => {
                logger.log('Uploaded file "%s" to "%s"', file, destPath);
                resolve();
              })
              .catch(error => {
                logger.error(
                  'Uploading file "%s" to "%s" failed',
                  file,
                  destPath
                );
                if (isFatalError(error)) {
                  reject(error);
                  return;
                }
                logApiUploadErrorInstance(
                  error,
                  new ApiErrorContext({
                    portalId,
                    request: destPath,
                    payload: file,
                  })
                );
                resolve();
              });
          });
        })
      );
    });
  });
}

module.exports = {
  sync,
};
