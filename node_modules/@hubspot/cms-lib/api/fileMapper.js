const fs = require('fs-extra');
const path = require('path');
const contentDisposition = require('content-disposition');
const http = require('../http');
const { getCwd } = require('../path');
const { getConfig, getPortalConfig } = require('../lib/config');

const FILE_MAPPER_API_PATH = 'content/filemapper/v1';

/**
 * @see {@link https://github.com/request/request-promise#the-transform-function}
 * @returns {FileMapperNode}
 */
const createFileMapperNodeStreamTransform = filePath => (source, response) => {
  const { parameters } = contentDisposition.parse(
    response.headers['content-disposition']
  );
  if (filePath[0] !== '/') {
    filePath = `/${filePath}`;
  }
  if (filePath[filePath.length - 1] === '/') {
    filePath = filePath.slice(0, filePath.length - 1);
  }
  if (typeof source !== 'string') {
    // JSON responses will have already been parsed.
    // TODO: Directly write the stream so we don't lose fidelity like whitespace.
    try {
      source = JSON.stringify(source, null, 2);
    } catch (err) {
      throw new TypeError(
        `Unable to parse "${filePath}" source: ${typeof source}`
      );
    }
  }
  const node = {
    source,
    path: filePath,
    name: parameters.filename,
    createdAt: parseInt(parameters['creation-date'], 10) || 0,
    updatedAt: parseInt(parameters['modification-date'], 10) || 0,
    folder: false,
    children: [],
  };
  return node;
};

/**
 *
 * @async
 * @param {number} portalId
 * @param {string} src
 * @param {string} dest
 * @param {object} options
 * @returns {Promise}
 */
async function upload(portalId, src, dest, options = {}) {
  return http.post(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/upload/${encodeURIComponent(dest)}`,
    formData: {
      file: fs.createReadStream(path.resolve(getCwd(), src)),
    },
    ...options,
  });
}

/**
 * Fetch a module by moduleId
 *
 * @async
 * @param {number} portalId
 * @param {number} moduleId
 * @param {object} options
 * @returns {Promise<FileMapperNode>}
 */
async function fetchModule(portalId, moduleId, options = {}) {
  return http.get(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/modules/${moduleId}`,
    ...options,
  });
}

/**
 * Fetch a *.module folder.
 *
 * @async
 * @param {number} portalId
 * @param {string} filePath
 * @param {object} options
 * @returns {Promise<FileMapperNode>}
 */
async function fetchModuleFolder(portalId, filePath, options = {}) {
  return http.get(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/download/${filePath}`,
    ...options,
  });
}

/**
 * Fetch a file by file path.
 *
 * @async
 * @param {number} portalId
 * @param {string} filePath
 * @param {object} options
 * @returns {Promise<FileMapperNode>}
 */
async function fetchFileStream(portalId, filePath, options = {}) {
  // Note: Use `request` instead of `request-promise` to use Node streams
  // https://github.com/request/request-promise#api-in-detail
  // https://github.com/request/request#streaming
  const { headers, ...opts } = options;
  return http.get(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/stream/${filePath}`,
    ...opts,
    headers: {
      ...headers,
      'content-type': 'application/octet-stream',
      accept: 'application/octet-stream',
    },
    transform: createFileMapperNodeStreamTransform(filePath),
  });
}

/**
 * Fetch a folder by folder path.
 *
 * @async
 * @param {number} portalId
 * @param {string} folderPath
 * @param {object} options
 * @returns {Promise<FileMapperNode>}
 */
async function fetchFolder(portalId, folderPath, options = {}) {
  return http.get(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/download/folder/${folderPath}`,
    ...options,
  });
}

/**
 * Fetch entire tree for portal.
 *
 * @async
 * @param {number} portalId
 * @param {object} options
 * @returns {Promise<FileMapperNode>}
 */
async function fetchAll(portalId, options = {}) {
  return http.get(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/download/all`,
    ...options,
  });
}

/**
 * Delete file by path
 *
 * @async
 * @param {number} portalId
 * @param {string} filePath
 * @param {object} options
 * @returns {Promise}
 */
async function deleteFile(portalId, filePath, options = {}) {
  return http.delete(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/delete/${filePath}`,
    ...options,
  });
}

/**
 * Delete folder by path
 *
 * @async
 * @param {number} portalId
 * @param {string} folderPath
 * @param {object} options
 * @returns {Promise}
 */
async function deleteFolder(portalId, folderPath, options = {}) {
  return http.delete(portalId, {
    uri: `${FILE_MAPPER_API_PATH}/delete/folder/${folderPath}`,
    ...options,
  });
}

/**
 * Track CMS CLI usage
 *
 * @async
 * @returns {Promise}
 */
async function trackUsage(eventName, eventClass, meta = {}, portalId) {
  let env = 'PROD';
  if (portalId) {
    const portalConfig = getPortalConfig(portalId);
    if (portalConfig && portalConfig.env) {
      env = portalConfig.env;
    }
  } else {
    const config = getConfig();
    if (config.env) {
      env = config.env;
    }
  }

  const requestOptions = http.getRequestOptions(
    { env },
    {
      uri: `${FILE_MAPPER_API_PATH}/cms-cli-usage`,
      body: {
        portalId,
        eventName,
        eventClass,
        meta,
      },
    }
  );
  return http.request.post(requestOptions);
}

module.exports = {
  createFileMapperNodeStreamTransform,
  deleteFile,
  deleteFolder,
  fetchAll,
  fetchFileStream,
  fetchFolder,
  fetchModule,
  fetchModuleFolder,
  trackUsage,
  upload,
};
